diff --git a/Makefile b/Makefile
index fa5aa64..b37ea54 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,5 @@
-BUILD := DEBUG
-VERSION := $(shell git describe --tags)
+BUILD := RELEASE
+VERSION := v0.5-26-g99100fb#$(shell git describe --tags)
 
 FLAGS := -Wall -Wpedantic -std=c++11 -MMD -MP
 DEBUG_FLAGS := -Og -g -DDEBUG
diff --git a/controller/controller.cpp b/controller/controller.cpp
index b0e95cd..1dd2f60 100644
--- a/controller/controller.cpp
+++ b/controller/controller.cpp
@@ -63,12 +63,17 @@ Controller::~Controller()
         rumbleThread.join();
     }
 
-    if (!setPowerMode(DEVICE_ID_CONTROLLER, POWER_OFF))
+    if (!powerOff())
     {
         Log::error("Failed to turn off controller");
     }
 }
 
+bool Controller::powerOff()
+{
+    return setPowerMode(DEVICE_ID_CONTROLLER, POWER_OFF);
+}
+
 void Controller::deviceAnnounced(uint8_t id, const AnnounceData *announce)
 {
     Log::info("Device announced, product id: %04x", announce->productId);
diff --git a/controller/controller.h b/controller/controller.h
index 59297e8..52e99a1 100644
--- a/controller/controller.h
+++ b/controller/controller.h
@@ -37,6 +37,8 @@ public:
     Controller(SendPacket sendPacket);
     ~Controller();
 
+    bool powerOff();
+
 private:
     /* GIP events */
     void deviceAnnounced(uint8_t id, const AnnounceData *announce) override;
diff --git a/controller/input.cpp b/controller/input.cpp
index ab6f8b8..abb4145 100644
--- a/controller/input.cpp
+++ b/controller/input.cpp
@@ -29,6 +29,8 @@ InputDevice::InputDevice(
     FeedbackReceived feedbackReceived
 ) : feedbackReceived(feedbackReceived)
 {
+    memset(&setup, 0, sizeof(setup));
+
     file = open("/dev/uinput", O_RDWR | O_NONBLOCK);
 
     if (file < 0)
@@ -73,6 +75,7 @@ void InputDevice::addAxis(uint16_t code, AxisConfig config)
         throw InputException("Error adding axis code");
     }
 
+#ifdef UI_DEV_SETUP
     uinput_abs_setup setup = {};
 
     setup.code = code;
@@ -85,6 +88,12 @@ void InputDevice::addAxis(uint16_t code, AxisConfig config)
     {
         throw InputException("Error setting up axis");
     }
+#else
+    setup.absmin[code] = config.minimum;
+    setup.absmax[code] = config.maximum;
+    setup.absfuzz[code] = config.fuzz;
+    setup.absflat[code] = config.flat;
+#endif
 }
 
 void InputDevice::addFeedback(uint16_t code)
@@ -99,8 +108,6 @@ void InputDevice::addFeedback(uint16_t code)
 
 void InputDevice::create(std::string name, DeviceConfig config)
 {
-    uinput_setup setup = {};
-
     setup.id.bustype = BUS_USB;
     setup.id.vendor = config.vendorId;
     setup.id.product = config.productId;
@@ -109,10 +116,16 @@ void InputDevice::create(std::string name, DeviceConfig config)
 
     std::copy(name.begin(), name.end(), std::begin(setup.name));
 
-    if (
-        ioctl(file, UI_DEV_SETUP, &setup) < 0 ||
-        ioctl(file, UI_DEV_CREATE) < 0
-    ) {
+#ifdef UI_DEV_SETUP
+    if (ioctl(file, UI_DEV_SETUP, &setup) < 0) {
+        throw InputException("Error setting up device");
+    }
+#else
+    if (write(file, &setup, sizeof(setup)) != sizeof(setup)) {
+        throw InputException("Error setting up device");
+    }
+#endif
+    if (ioctl(file, UI_DEV_CREATE) < 0) {
         throw InputException("Error creating device");
     }
 
diff --git a/controller/input.h b/controller/input.h
index c3c2cfd..89727a7 100644
--- a/controller/input.h
+++ b/controller/input.h
@@ -94,6 +94,12 @@ private:
     ff_effect effect = {};
     uint16_t effectGain = 0xffff;
     FeedbackReceived feedbackReceived;
+
+#ifdef UI_DEV_SETUP
+    uinput_setup setup;
+#else
+    uinput_user_dev setup;
+#endif
 };
 
 class InputException : public std::runtime_error
diff --git a/dongle/dongle.cpp b/dongle/dongle.cpp
index b931ff8..eab7689 100644
--- a/dongle/dongle.cpp
+++ b/dongle/dongle.cpp
@@ -53,7 +53,7 @@ Dongle::~Dongle()
 
 void Dongle::handleControllerConnect(Bytes address)
 {
-    std::lock_guard<std::mutex> lock(controllerMutex);
+    std::lock_guard<std::recursive_mutex> lock(controllerMutex);
 
     uint8_t wcid = associateClient(address);
 
@@ -85,7 +85,7 @@ void Dongle::handleControllerDisconnect(uint8_t wcid)
         return;
     }
 
-    std::lock_guard<std::mutex> lock(controllerMutex);
+    std::lock_guard<std::recursive_mutex> lock(controllerMutex);
 
     // Ignore unconnected controllers
     if (!controllers[wcid - 1])
@@ -158,7 +158,7 @@ void Dongle::handleControllerPacket(uint8_t wcid, const Bytes &packet)
     // Skip 2 bytes of padding
     const Bytes data(packet, sizeof(QosFrame) + sizeof(uint16_t));
 
-    std::lock_guard<std::mutex> lock(controllerMutex);
+    std::lock_guard<std::recursive_mutex> lock(controllerMutex);
 
     // Ignore unconnected controllers
     if (!controllers[wcid - 1])
@@ -268,8 +268,10 @@ void Dongle::handleBulkData(const Bytes &data)
                 break;
 
             case EVT_CLIENT_LOST:
+#if 0 // Apparently this causes disconnection when the controller is actually still connected
                 // Packet is guaranteed not to be empty
                 handleControllerDisconnect(packet[0]);
+#endif
                 break;
         }
     }
@@ -307,3 +309,17 @@ void Dongle::readBulkPackets(uint8_t endpoint)
         }
     }
 }
+
+void Dongle::powerOffControllers()
+{
+    std::lock_guard<std::recursive_mutex> lock(controllerMutex);
+
+    Log::info("Powering off controllers");
+    for (std::unique_ptr<Controller> &controller : controllers)
+    {
+        if (controller && !controller->powerOff())
+        {
+            Log::error("Failed to power off controller");
+        }
+    }
+}
diff --git a/dongle/dongle.h b/dongle/dongle.h
index 597d1d0..a721f9c 100644
--- a/dongle/dongle.h
+++ b/dongle/dongle.h
@@ -47,6 +47,8 @@ public:
     Dongle(std::unique_ptr<UsbDevice> usbDevice);
     ~Dongle();
 
+    void powerOffControllers();
+
     using Mt76::setPairingStatus;
 
 private:
@@ -62,6 +64,6 @@ private:
     std::vector<std::thread> threads;
     std::atomic<bool> stopThreads;
 
-    std::mutex controllerMutex;
+    std::recursive_mutex controllerMutex;
     std::array<std::unique_ptr<Controller>, MT_WCID_COUNT> controllers;
 };
diff --git a/utils/log.cpp b/utils/log.cpp
index e93ccbb..cad0752 100644
--- a/utils/log.cpp
+++ b/utils/log.cpp
@@ -53,7 +53,13 @@ namespace Log
         // Add local time to output if available
         if (localtime_r(&time, &localTime))
         {
+#if !defined(__GNUC__) || (__GNUC__ >= 5)
             stream << std::put_time(&localTime, "%F %T") << " ";
+#else
+            char timestr[128];
+            strftime(timestr, sizeof(timestr), "%F %T", &localTime);
+            stream << timestr << " ";
+#endif
         }
 
         stream << std::left << std::setw(5);
diff --git a/xow.cpp b/xow.cpp
index 68ab700..8824dd4 100644
--- a/xow.cpp
+++ b/xow.cpp
@@ -36,6 +36,7 @@ int main()
     sigaddset(&signalMask, SIGINT);
     sigaddset(&signalMask, SIGTERM);
     sigaddset(&signalMask, SIGUSR1);
+    sigaddset(&signalMask, SIGUSR2);
 
     // Block signals for all USB threads
     if (pthread_sigmask(SIG_BLOCK, &signalMask, nullptr) < 0)
@@ -104,6 +105,13 @@ int main()
 
             dongle.setPairingStatus(true);
         }
+
+        if (type == SIGUSR2)
+        {
+            Log::debug("User signal received");
+
+            dongle.powerOffControllers();
+        }
     }
 
     Log::info("Shutting down...");
