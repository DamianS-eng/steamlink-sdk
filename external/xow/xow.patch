diff --git a/controller/input.cpp b/controller/input.cpp
index 9a903a2..291a2fd 100644
--- a/controller/input.cpp
+++ b/controller/input.cpp
@@ -29,6 +29,8 @@
 
 InputDevice::InputDevice(FeedbackReceived feedbackReceived)
 {
+    memset(&setup, 0, sizeof(setup));
+
     file = open("/dev/uinput", O_RDWR | O_NONBLOCK);
 
     if (file < 0)
@@ -78,6 +80,7 @@ void InputDevice::addAxis(uint16_t code, AxisConfig config)
         throw InputException("Error adding axis code");
     }
 
+#ifdef UI_DEV_SETUP
     uinput_abs_setup setup = {};
 
     setup.code = code;
@@ -90,6 +93,12 @@ void InputDevice::addAxis(uint16_t code, AxisConfig config)
     {
         throw InputException("Error setting up axis");
     }
+#else
+    setup.absmin[code] = config.minimum;
+    setup.absmax[code] = config.maximum;
+    setup.absfuzz[code] = config.fuzz;
+    setup.absflat[code] = config.flat;
+#endif
 }
 
 void InputDevice::addFeedback(uint16_t code)
@@ -107,8 +116,6 @@ void InputDevice::create(
     uint16_t productId,
     std::string name
 ) {
-    uinput_setup setup = {};
-
     setup.id.bustype = BUS_USB;
     setup.id.vendor = vendorId;
     setup.id.product = productId;
@@ -116,10 +123,16 @@ void InputDevice::create(
 
     std::copy(name.begin(), name.end(), std::begin(setup.name));
 
-    if (
-        ioctl(file, UI_DEV_SETUP, &setup) < 0 ||
-        ioctl(file, UI_DEV_CREATE) < 0
-    ) {
+#ifdef UI_DEV_SETUP
+    if (ioctl(file, UI_DEV_SETUP, &setup) < 0) {
+        throw InputException("Error setting up device");
+    }
+#else
+    if (write(file, &setup, sizeof(setup)) != sizeof(setup)) {
+        throw InputException("Error setting up device");
+    }
+#endif
+    if (ioctl(file, UI_DEV_CREATE) < 0) {
         throw InputException("Error creating device");
     }
 
diff --git a/controller/input.h b/controller/input.h
index 8070839..a3de53a 100644
--- a/controller/input.h
+++ b/controller/input.h
@@ -86,6 +86,12 @@ private:
     ff_effect effect = {};
     uint16_t effectGain = 0xffff;
     FeedbackReceived feedbackReceived;
+
+#ifdef UI_DEV_SETUP
+    uinput_setup setup;
+#else
+    uinput_user_dev setup;
+#endif
 };
 
 class InputException : public std::runtime_error
diff --git a/dongle/dongle.cpp b/dongle/dongle.cpp
index 3628795..e9f516c 100644
--- a/dongle/dongle.cpp
+++ b/dongle/dongle.cpp
@@ -42,13 +42,7 @@ bool Dongle::beforeClose()
 
     Log::info("Dongle power-off");
 
-    for (std::unique_ptr<Controller> &controller : controllers)
-    {
-        if (controller && !controller->powerOff())
-        {
-            Log::error("Failed to power off controller");
-        }
-    }
+    powerOffControllers();
 
     if (!Mt76::beforeClose())
     {
@@ -58,6 +52,14 @@ bool Dongle::beforeClose()
     return true;
 }
 
+void Dongle::userSignal()
+{
+    std::lock_guard<std::mutex> lock(handlePacketMutex);
+
+    Log::info("Powering off controllers");
+    powerOffControllers();
+}
+
 void Dongle::clientConnected(uint8_t wcid, Bytes address)
 {
     auto sendPacket = std::bind(
@@ -156,3 +158,14 @@ bool Dongle::sendControllerPacket(
 
     return true;
 }
+
+void Dongle::powerOffControllers()
+{
+    for (std::unique_ptr<Controller> &controller : controllers)
+    {
+        if (controller && !controller->powerOff())
+        {
+            Log::error("Failed to power off controller");
+        }
+    }
+}
diff --git a/dongle/dongle.h b/dongle/dongle.h
index 86429a4..974e344 100644
--- a/dongle/dongle.h
+++ b/dongle/dongle.h
@@ -41,6 +41,7 @@ class Dongle : public Mt76
 private:
     bool afterOpen() override;
     bool beforeClose() override;
+    void userSignal() override;
 
     void clientConnected(uint8_t wcid, Bytes address) override;
     void clientDisconnected(uint8_t wcid) override;
@@ -52,5 +53,7 @@ private:
         const Bytes &packet
     );
 
+    void powerOffControllers();
+
     std::array<std::unique_ptr<Controller>, MT_WCID_COUNT> controllers;
 };
diff --git a/dongle/usb.cpp b/dongle/usb.cpp
index 68f088b..23cc282 100644
--- a/dongle/usb.cpp
+++ b/dongle/usb.cpp
@@ -185,6 +185,7 @@ UsbDeviceManager::UsbDeviceManager()
     sigemptyset(&signalMask);
     sigaddset(&signalMask, SIGINT);
     sigaddset(&signalMask, SIGTERM);
+    sigaddset(&signalMask, SIGUSR1);
 
     // Block signals in all threads
     if (pthread_sigmask(SIG_BLOCK, &signalMask, nullptr) < 0)
@@ -252,10 +253,19 @@ void UsbDeviceManager::handleEvents(UsbDevice &device)
     {
         signalfd_siginfo info = {};
 
-        if (read(signalFile, &info, sizeof(info)) != sizeof(info))
+        do
         {
-            throw UsbException("Error reading signal: ", strerror(errno));
-        }
+            if (read(signalFile, &info, sizeof(info)) != sizeof(info))
+            {
+                throw UsbException("Error reading signal: ", strerror(errno));
+            }
+
+            if (info.ssi_signo == SIGUSR1)
+            {
+                device.userSignal();
+            }
+        
+        } while (info.ssi_signo != SIGINT && info.ssi_signo != SIGTERM);
 
         Log::debug("Stop signal received");
 
diff --git a/dongle/usb.h b/dongle/usb.h
index 3ed2295..0bb314d 100644
--- a/dongle/usb.h
+++ b/dongle/usb.h
@@ -42,6 +42,8 @@ public:
     void open(libusb_device *device);
     void close();
 
+    virtual void userSignal() { }
+
     Terminate terminate;
 
 protected:
diff --git a/utils/log.cpp b/utils/log.cpp
index d6178ba..ae267f3 100644
--- a/utils/log.cpp
+++ b/utils/log.cpp
@@ -55,7 +55,13 @@ namespace Log
         std::tm localTime = *std::localtime(&time);
         std::ostringstream stream;
 
+#if !defined(__GNUC__) || (__GNUC__ >= 5)
         stream << std::put_time(&localTime, "%F %T");
+#else
+        char timestr[128];
+        strftime(timestr, sizeof(timestr), "%F %T", &localTime);
+        stream << timestr;
+#endif
 
         std::fprintf(output, "%s %-5s - ", stream.str().c_str(), level.c_str());
     }
